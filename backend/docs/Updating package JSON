## Purpose
This file only exists because NPM does not allow comments inside package*.json.

Why JSON Doesn't Support Comments:
1. JSON Specification:
    - JSON is designed to be a data interchange format
    - It's meant to be machine-readable, not human-readable
    - Comments would make it non-standard JSON
    - Many parsers and tools expect strict JSON

2. What Happens:
    ❌ npm expects valid JSON
    ❌ Docker expects valid JSON
    ❌ CI/CD tools expect valid JSON
    ❌ Most JSON parsers will fail with comments

## 📦 What is package.json?

- This file defines your Node.js project's metadata, dependencies, scripts, and more.
- It tells npm (Node Package Manager) what packages your project needs to run, build, or test.
- It also includes project info like name, version, author, and license.

Example sections in package.json:
  - "dependencies": Packages required for your app to run.
  - "devDependencies": Packages needed only for development (like testing tools).
  - "scripts": Shortcuts to run commands (e.g., "npm start", "npm run build").

## 📑 What is package-lock.json?

- This file is automatically generated by npm when you install or update dependencies.
- It locks the exact versions of every installed package (and their dependencies).
- This ensures that everyone working on the project (or deploying it) gets the same dependency versions, avoiding "works on my machine" issues.
- You should commit this file to version control (git).

## 🛠️ When do you update these files?

- package.json changes when you:
    - Add, remove, or update dependencies (using npm install, uninstall, or update).
    - Change scripts or project metadata.
- package-lock.json updates automatically whenever you run npm install or change dependencies.

## 🔄 How to update package-lock.json?

- If you add or remove a dependency:
    npm install <package-name>
    npm uninstall <package-name>

- To refresh all dependencies and update the lock file:
    npm install

- To update all packages to their latest allowed versions (according to package.json):
    npm update

- If your lock file gets out of sync or corrupted, you can regenerate it:
    rm package-lock.json node_modules/ -rf
    npm install

## 💡 TL;DR:
- Edit package.json to change dependencies or scripts.
- Run npm install to update package-lock.json.
- Always commit both files to git!


## 📚 About "dependencies" and "devDependencies"

- "dependencies":
    - These are packages your app needs to run in production.
    - When someone installs your project (npm install), these packages are installed by default.
    - Example: express, lodash, etc.

- "devDependencies":
    - These are packages needed only during development (not in production).
    - Examples: testing libraries (jest, mocha), build tools (typescript, webpack), linters, etc.
    - They are installed by default, but if someone runs `npm install --production`, only "dependencies" are installed.

🧠 How does NPM know what to install?

- When you run `npm install`:
    - NPM reads your package.json.
    - It installs everything listed under "dependencies" and "devDependencies" (unless you use the --production flag).
    - It also reads package-lock.json to ensure exact versions are installed for consistency.

- If you deploy to production and want to skip dev tools:
    - Use `npm install --production` or set the NODE_ENV=production environment variable.
    - Only "dependencies" will be installed, making your deployment smaller and faster.

💡 Tip: Always put packages needed to run your app in "dependencies", and tools needed only for development in "devDependencies".